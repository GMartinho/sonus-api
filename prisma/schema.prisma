generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user_account {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  first_name  String        @db.Citext
  last_name   String        @db.Citext
  stage_name  String?
  role        String        @default("USER") @db.Citext
  email       String        @unique @db.Citext
  password    String
  created_at  DateTime      @default(now()) @db.Timestamptz(3)
  updated_at  DateTime      @default(now()) @db.Timestamptz(3)
  composition composition[]
  folder      folder[]
}

model folder {
  id           Int           @id @default(autoincrement())
  user_id      String        @db.Uuid
  parent_id    Int?
  name         String
  image        String?       @unique
  created_at   DateTime      @default(now()) @db.Timestamptz(3)
  updated_at   DateTime      @default(now()) @db.Timestamptz(3)
  folder       folder?       @relation("folderTofolder_parent_id", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_account user_account  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  composition  composition[]
  other_folder folder[]      @relation("folderTofolder_parent_id")
}

model composition {
  id           Int          @id @default(autoincrement())
  user_id      String       @db.Uuid
  folder_id    Int?
  name         String
  record       String
  midi_record  String?
  created_at   DateTime     @default(now()) @db.Timestamptz(3)
  updated_at   DateTime     @default(now()) @db.Timestamptz(3)
  folder       folder?      @relation(fields: [folder_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_account user_account @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
